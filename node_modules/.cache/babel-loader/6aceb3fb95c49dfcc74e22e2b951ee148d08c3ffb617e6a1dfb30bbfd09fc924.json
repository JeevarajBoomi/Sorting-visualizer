{"ast":null,"code":"var _jsxFileName = \"/Users/jeevaraj/Documents/GitHub/Sorting-visualizer/sorting-visualizer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [array, setArray] = useState([]);\n\n  // Function to generate a new random array\n  const generateArray = () => {\n    const newArray = [];\n    for (let i = 0; i < 50; i++) {\n      newArray.push(Math.floor(Math.random() * 300) + 5);\n    }\n    setArray(newArray);\n  };\n\n  // Function to reset the array\n  const resetArray = () => {\n    generateArray();\n  };\n\n  // Function to perform bubble sort\n  const bubbleSort = async () => {\n    const newArray = [...array];\n    for (let i = 0; i < newArray.length - 1; i++) {\n      for (let j = 0; j < newArray.length - i - 1; j++) {\n        if (newArray[j] > newArray[j + 1]) {\n          // Swap elements\n          const temp = newArray[j];\n          newArray[j] = newArray[j + 1];\n          newArray[j + 1] = temp;\n          // Update array state after each swap for visualization\n          await new Promise(resolve => setTimeout(() => {\n            setArray([...newArray]);\n            resolve();\n          }, 50));\n        }\n      }\n    }\n  };\n\n  // Function to perform insertion sort\n  const insertionSort = async () => {\n    const newArray = [...array];\n    for (let i = 1; i < newArray.length; i++) {\n      let key = newArray[i];\n      let j = i - 1;\n      while (j >= 0 && newArray[j] > key) {\n        newArray[j + 1] = newArray[j];\n        j = j - 1;\n        await new Promise(resolve => setTimeout(() => {\n          setArray([...newArray]);\n          resolve();\n        }, 50));\n      }\n      newArray[j + 1] = key;\n    }\n  };\n\n  // Function to handle manually setting the array\n  const handleManualArray = () => {\n    const inputArray = prompt('Enter comma-separated numbers:');\n    if (inputArray) {\n      const newArray = inputArray.split(',').map(str => parseInt(str.trim(), 10));\n      setArray(newArray);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetArray,\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: bubbleSort,\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: insertionSort,\n        children: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualArray,\n        children: \"Set Manual Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mNEMnFfdTVMInB12EsXKuBmuKk0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","array","setArray","generateArray","newArray","i","push","Math","floor","random","resetArray","bubbleSort","length","j","temp","Promise","resolve","setTimeout","insertionSort","key","handleManualArray","inputArray","prompt","split","map","str","parseInt","trim","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","idx","style","height","_c","$RefreshReg$"],"sources":["/Users/jeevaraj/Documents/GitHub/Sorting-visualizer/sorting-visualizer/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [array, setArray] = useState([]);\n\n  // Function to generate a new random array\n  const generateArray = () => {\n    const newArray = [];\n    for (let i = 0; i < 50; i++) {\n      newArray.push(Math.floor(Math.random() * 300) + 5);\n    }\n    setArray(newArray);\n  };\n\n  // Function to reset the array\n  const resetArray = () => {\n    generateArray();\n  };\n\n  // Function to perform bubble sort\n  const bubbleSort = async () => {\n    const newArray = [...array];\n    for (let i = 0; i < newArray.length - 1; i++) {\n      for (let j = 0; j < newArray.length - i - 1; j++) {\n        if (newArray[j] > newArray[j + 1]) {\n          // Swap elements\n          const temp = newArray[j];\n          newArray[j] = newArray[j + 1];\n          newArray[j + 1] = temp;\n          // Update array state after each swap for visualization\n          await new Promise(resolve => setTimeout(() => {\n            setArray([...newArray]);\n            resolve();\n          }, 50));\n        }\n      }\n    }\n  };\n\n  // Function to perform insertion sort\n  const insertionSort = async () => {\n    const newArray = [...array];\n    for (let i = 1; i < newArray.length; i++) {\n      let key = newArray[i];\n      let j = i - 1;\n      while (j >= 0 && newArray[j] > key) {\n        newArray[j + 1] = newArray[j];\n        j = j - 1;\n        await new Promise(resolve => setTimeout(() => {\n          setArray([...newArray]);\n          resolve();\n        }, 50));\n      }\n      newArray[j + 1] = key;\n    }\n  };\n\n  // Function to handle manually setting the array\n  const handleManualArray = () => {\n    const inputArray = prompt('Enter comma-separated numbers:');\n    if (inputArray) {\n      const newArray = inputArray.split(',').map(str => parseInt(str.trim(), 10));\n      setArray(newArray);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"controls\">\n        <button onClick={resetArray}>Generate New Array</button>\n        <button onClick={bubbleSort}>Bubble Sort</button>\n        <button onClick={insertionSort}>Insertion Sort</button>\n        <button onClick={handleManualArray}>Set Manual Array</button>\n        {/* Add more sorting algorithm buttons as needed */}\n      </div>\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{ height: `${value}px` }}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}